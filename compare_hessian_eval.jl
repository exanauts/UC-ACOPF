using ExaAdmm
using CUDA

# Input values
param = [16.66666666666668 29.410571456874987 0.0; -2.5048100803275856e-18 -9.376760401008298e-21 0.0; 16.66666666666668 29.017076958718697 0.0; 39.024363268494454 57.13054843463739 0.0; 0.0001025005317824082 1.2796789079167668 0.0; -0.0 1.0199671466348923e-22 0.0; 0.00010250053178240817 1.2796789079167668 0.0; 0.5073806189900605 174.90298280485464 130.41507335161262; -1.4210854715202004e-14 -4.440892098500626e-15 -3.552713678800501e-15; 35.09090598516309 780.7808535127238 718.0872874228598; -3.197442310920451e-14 -8.881784197001252e-15 -2.4868995751603507e-14; 9.769962616701378e-15 9.769962616701378e-15 -7.993605777301127e-15; 1.7208456881689926e-15 7.105427357601002e-15 1.7763568394002505e-15; 1000.0 1000.0 1000.0; 1000.0 1000.0 1000.0; 1000.0 1000.0 1000.0; 40000.0 40000.0 40000.0; 40000.0 40000.0 40000.0; 40000.0 40000.0 40000.0; 40000.0 40000.0 40000.0; 1.0e7 1.0e6 1.0e6; 100.0 100.0 100.0; 1.0e7 1.0e6 1.0e6; 100.0 100.0 100.0; 1000.0 1000.0 1000.0; 1000.0 100.0 100.0; 0.08333333333333333 0.14626586828806232 1.4000000000000001; -7.514430240982757e-21 -2.8130281203024896e-23 0.0; 0.016666666666666677 0.029017076958718697 0.0; 0.039024363268494455 0.05713054843463739 0.0; 1.025005317824082e-7 0.0012796789079167667 0.0; 0.0 1.0199671466348923e-25 0.0; 1.0250053178240818e-7 0.0012796789079167667 0.0; 0.25 0.30000000000000004 0.27; 0.25 0.30000000000000004 0.27; 0.25 0.30000000000000004 0.27; 0.25 0.30000000000000004 0.27; 2.5 3.0 2.7; 0.1 0.1 0.1; 3.0 3.0 3.0; -3.0 -3.0 -3.0]
# param = [16.66666666666668 29.410571456874987 21.89128667995315; -2.5048100803275856e-18 -9.376760401008298e-21 -6.940699729756169e-20; 16.66666666666668 29.017076958718697 21.653646811125228; 39.024363268494454 57.13054843463739 47.289045965409365; 0.0001025005317824082 1.2796789079167668 0.8587130088582915; -0.0 1.0199671466348923e-22 -0.0; 0.00010250053178240817 1.2796789079167668 0.8587130088582915; 0.5073806189900605 1.1368683772161603e-13 130.41507335161262; -1.4210854715202004e-14 -4.440892098500626e-15 -3.552713678800501e-15; 35.09090598516309 1.0118128557223827e-11 718.0872874228598; -3.197442310920451e-14 -8.881784197001252e-15 -2.4868995751603507e-14; 9.769962616701378e-15 9.769962616701378e-15 -7.993605777301127e-15; 1.7208456881689926e-15 7.105427357601002e-15 1.7763568394002505e-15; 1000.0 1000.0 1000.0; 1000.0 1000.0 1000.0; 1000.0 1000.0 1000.0; 40000.0 40000.0 40000.0; 40000.0 40000.0 40000.0; 40000.0 40000.0 40000.0; 40000.0 40000.0 40000.0; 1.0e7 1.0e6 1.0e6; 100.0 100.0 100.0; 1.0e7 1.0e6 1.0e6; 100.0 100.0 100.0; 1000.0 1000.0 1000.0; 1000.0 100.0 100.0; 0.08333333333333333 0.14626586828806232 0.10898115366210989; -7.514430240982757e-21 -2.8130281203024896e-23 -2.0822099189268508e-22; 0.016666666666666677 0.029017076958718697 0.021653646811125228; 0.039024363268494455 0.05713054843463739 0.047289045965409365; 1.025005317824082e-7 0.0012796789079167667 0.0008587130088582915; 0.0 1.0199671466348923e-25 0.0; 1.0250053178240818e-7 0.0012796789079167667 0.0008587130088582915; 0.25 0.30000000000000004 0.27; 0.25 0.30000000000000004 0.27; 0.25 0.30000000000000004 0.27; 0.25 0.30000000000000004 0.27; 2.5 3.0 2.7; 0.1 0.1 0.1; 3.0 3.0 3.0; -3.0 -3.0 -3.0]
# param = [25.0 0.0 0.0; -2.5048100803275856e-18 0.0 0.0; 16.66666666666668 0.0 0.0; 39.024363268494454 0.0 0.0; 0.0001025005317824082 0.0 0.0; -0.0 0.0 0.0; 0.00010250053178240817 0.0 0.0; 0.5073806189900605 174.90298280485464 130.41507335161262; -1.4210854715202004e-14 -4.440892098500626e-15 -3.552713678800501e-15; 639.9304331203278 780.7808535127238 718.0872874228598; -3.197442310920451e-14 -8.881784197001252e-15 -2.4868995751603507e-14; 9.769962616701378e-15 9.769962616701378e-15 -7.993605777301127e-15; 1.7208456881689926e-15 7.105427357601002e-15 1.7763568394002505e-15; 1000.0 1000.0 1000.0; 1000.0 1000.0 1000.0; 1000.0 1000.0 1000.0; 40000.0 40000.0 40000.0; 40000.0 40000.0 40000.0; 40000.0 40000.0 40000.0; 40000.0 40000.0 40000.0; 1.0e7 1.0e6 1.0e6; 100.0 100.0 100.0; 1.0e6 1.0e6 1.0e6; 100.0 100.0 100.0; 1000.0 1000.0 1000.0; 1000.0 100.0 100.0; 0.07500000000000001 1.55 1.4000000000000001; -7.514430240982757e-21 0.0 0.0; 0.016666666666666677 0.0 0.0; 0.039024363268494455 0.0 0.0; 1.025005317824082e-7 0.0 0.0; 0.0 0.0 0.0; 1.0250053178240818e-7 0.0 0.0; 0.25 0.30000000000000004 0.27; 0.25 0.30000000000000004 0.27; 0.25 0.30000000000000004 0.27; 0.25 0.30000000000000004 0.27; 2.5 3.0 2.7; 0.1 0.1 0.1; 3.0 3.0 3.0; -3.0 -3.0 -3.0]
scale = 1e-4
c0 = 10.
c1 = 500.
c2 = 1208.
BaseMVa = 100.

# CPU Hessian evaluation
rows = zeros(Int, 41)
cols = zeros(Int, 41)
values = zeros(41)
ExaAdmm.eval_h_generator_continuous_kernel_cpu(
    1, 0, Float64[], :Structure, scale,
    rows, cols, Float64[], values,
    param, c2, c1, c0, BaseMVa
)

ExaAdmm.eval_h_generator_continuous_kernel_cpu(
    1, 0, Float64[], :Eval, scale,
    rows, cols, Float64[], values,
    param, c2, c1, c0, BaseMVa
)


# GPU Hessian evaluation
x_d = CuArray{Float64}(undef, 1)
param_d = CuArray{Float64}(undef, size(param)[1], size(param)[2])
copy!(param_d, param)
H_gpu = CuArray{Float64}(undef, 13, 13)
CUDA.@sync @cuda threads=64 blocks=1 ExaAdmm.eval_h_generator_continuous_kernel_gpu(
    1, 0, x_d, H_gpu,
    param_d, scale, c2, c1, c0, BaseMVa
)

# Equivalence check
function check_cpu_gpu_hessian_equivalence(rows, cols, values, H_gpu)
    d = Dict( (rows[i], cols[i]) => i for i in 1:length(values) )
    for i in 1:13
        for j in 1:13
            if (i,j) in keys(d)
                try
                    @assert isapprox(values[d[(i,j)]], H_gpu[i,j], atol=1e-12)
                catch
                    println("Difference at index ($(i), $(j)) detected: CPU value $(values[d[(i,j)]]), GPU value $(H_gpu[i,j])")
                end
            else
                try
                    @assert isapprox(H_gpu[i,j], 0, atol=1e-12)
                catch
                    println("Difference at index ($(i), $(j)) detected: CPU value 0, GPU value $(H_gpu[i,j])")
                end
            end
        end
    end
end
# This will print out nothing if no difference is detected
check_cpu_gpu_hessian_equivalence(rows, cols, values, H_gpu)